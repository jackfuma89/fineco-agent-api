# -*- coding: utf-8 -*-
"""api_demo_fineco_otp_resetpin.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aAzrYV0tO6e4VHHyFsUYiqY_z_c_ocqu
"""

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import List
from random import randint
from datetime import datetime, timedelta

app = FastAPI()

# --- Mock DB ---
users = [
    {
        "user_id": "abc123",
        "first_name": "Mario",
        "last_name": "Rossi",
        "phone": "+393341234567",
        "auth_code": "1234",
        "otp": None,
        "otp_expires_at": None,
        "pin_dispositivo": "87654321"
    },
    {
        "user_id": "def456",
        "first_name": "Giulia",
        "last_name": "Bianchi",
        "phone": "+393331112233",
        "auth_code": "5678",
        "otp": None,
        "otp_expires_at": None,
        "pin_dispositivo": "12345678"
    },
    {
        "user_id": "ghi789",
        "first_name": "Luca",
        "last_name": "Verdi",
        "phone": "+393320998877",
        "auth_code": "4321",
        "otp": None,
        "otp_expires_at": None,
        "pin_dispositivo": "11223344"
    }
]

# --- Models ---
class OTPRequest(BaseModel):
    user_id: str

class OTPVerify(BaseModel):
    user_id: str
    otp: str

class ResetPinRequest(BaseModel):
    user_id: str

# --- Endpoints ---

@app.get("/users/by-phone")
def identify_by_phone(phone: str):
    for user in users:
        if user["phone"] == phone:
            return {
                "user_id": user["user_id"],
                "first_name": user["first_name"],
                "last_name": user["last_name"],
                "masked_phone": f"****{user['phone'][-2:]}"
            }
    raise HTTPException(status_code=404, detail="Numero non riconosciuto")

@app.get("/users/identify")
def identify_by_name(first_name: str, last_name: str):
    for user in users:
        if user["first_name"].lower() == first_name.lower() and user["last_name"].lower() == last_name.lower():
            return {
                "user_id": user["user_id"],
                "first_name": user["first_name"],
                "last_name": user["last_name"],
                "masked_phone": f"****{user['phone'][-2:]}"
            }
    raise HTTPException(status_code=404, detail="Utente non trovato con questo nome")

@app.post("/auth/otp")
def generate_otp(req: OTPRequest):
    user = next((u for u in users if u["user_id"] == req.user_id), None)
    if not user:
        raise HTTPException(status_code=404, detail="User not found")

    otp_code = str(randint(1000, 9999))
    expires_at = datetime.utcnow() + timedelta(minutes=3)

    user["otp"] = otp_code
    user["otp_expires_at"] = expires_at

    return {
        "otp": otp_code,
        "expires_in": 180,
        "sent_to": f"****{user['phone'][-2:]}"
    }

@app.post("/auth/verify")
def verify_otp(data: OTPVerify):
    user = next((u for u in users if u["user_id"] == data.user_id), None)
    if not user:
        raise HTTPException(status_code=404, detail="User not found")

    if user["otp"] != data.otp:
        raise HTTPException(status_code=401, detail="OTP non valido")

    if datetime.utcnow() > user["otp_expires_at"]:
        raise HTTPException(status_code=410, detail="OTP scaduto")

    return { "valid": True }

@app.post("/pin/reset")
def reset_pin(req: ResetPinRequest):
    user = next((u for u in users if u["user_id"] == req.user_id), None)
    if not user:
        raise HTTPException(status_code=404, detail="User not found")

    new_pin = str(randint(10000000, 99999999))
    user["pin_dispositivo"] = new_pin

    return {
        "message": "Nuovo PIN generato e inviato via SMS",
        "new_pin": new_pin,
        "sent_to": f"****{user['phone'][-2:]}"
    }
